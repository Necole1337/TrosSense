#include<iostream>#include<xxXXXxxXxX>#include<XXXxxXxXxXx>#include<XXXxxxXXXx>#include<xxXXXxxxX>#include<XxxxxXx>#include<xxxxxXxx>#include<xxxxxx>namespace a1{class b1;class c1;class d1;class e1;class f1;class g1;namespace h1{namespace i1{namespace j1{class k1;class l1;class m1;class n1;}}}}class o1{public:double a,b,c;o1(double a,double b,double c):a(a),b(b),c(c){}o1(const XxX::EntityPlayer&p1){auto q1=p1.getPosition();a=q1.a;b=q1.b;c=q1.c;}double r1(const o1&s1)const{return std::sqrt(std::pow(a-s1.a,2)+std::pow(b-s1.b,2)+std::pow(c-s1.c,2));}};class t1{public:double a,b;t1(double a,double b):a(a),b(b){}};class u1{public:virtual void v1()=0;virtual void w1()=0;virtual void x1()=0;virtual void y1(const std::shared_ptr<a1::b1>&z1)=0;virtual void A1(const std::shared_ptr<a1::b1>&B1)=0;virtual std::string C1()const=0;};class D1{public:virtual bool E1()const=0;virtual double F1()const=0;};class G1:public D1{private:std::vector<std::string>H1;int I1;public:G1(const std::vector<std::string>&H1,int I1):H1(H1),I1(I1){}bool E1()const override{return true;}double F1()const override{return I1;}};class J1:public D1{private:double K1;public:J1(double K1):K1(K1){}bool E1()const override{return true;}double F1()const override{return K1;}};class L1:public D1{private:bool M1;public:L1(bool M1):M1(M1){}bool E1()const override{return M1;}double F1()const override{return 0;}};class N1:public u1{private:static const std::vector<std::string>O1;G1 P1;J1 Q1;J1 R1;J1 S1;L1 T1;L1 U1;L1 V1;J1 W1;std::shared_ptr<XxX::EntityPlayer>X1=nullptr;o1*Y1=nullptr;o1*Z1=nullptr;o1*a2=nullptr;t1*b2=nullptr;t1*c2=nullptr;int d2=INT_MAX;std::queue<std::shared_ptr<a1::b1>>e2;XxX::EntityPlayerSP*f2;XxX::World*g2;public:N1(XxX::EntityPlayerSP*f2,XxX::World*g2):f2(f2),g2(g2),P1({"SilentMove","Instant"},0),Q1(10,5,100,5),R1(6,3,6,1),S1(1,1,5,0.1),T1(true),U1(false),V1(false),W1(20,1,20,1){}void v1()override{if(Y1!=nullptr){f2->setPosition(Y1->a,Y1->b,Y1->c);}if(a2!=nullptr){f2->motionX=a2->a;f2->motionY=a2->b;f2->motionZ=a2->c;}X1=nullptr;Y1=nullptr;Z1=nullptr;a2=nullptr;b2=nullptr;c2=nullptr;d2=INT_MAX;h1();}void x1()override{if(T1.E1()&&Y1!=nullptr){}}void w1()override{if(X1==nullptr||!g2->playerEntities.contains(*X1)){X1=i1();if(X1!=nullptr)Utils::sendMessage("found target "+X1->getName());return;}if(Y1==nullptr||a2==nullptr||b2==nullptr){Y1=new o1(*f2);Z1=new o1(*Y1);a2=new o1(f2->motionX,f2->motionY,f2->motionZ);b2=new t1(f2->rotationYaw,f2->rotationPitch);c2=new t1(*b2);}o1 d3(*X1);double e3=Y1->r1(d3);double f3=MoveUtil::getAllowedHorizontalDistance();if(S1.F1()!=1){f3=S1.F1();}if(e3<=(X1==f2?std::sqrt(f3*f3):R1.F1())){if(X1==f2){X1=nullptr;Y1=nullptr;a2=nullptr;b2=nullptr;h1();}else{b2=new t1(PlayerRotation::getYaw(d3),PlayerRotation::getPitch(d3));Utils::attackEntity(X1,true);Utils::sendMessage("attack");X1=f2;}return;}switch(static_cast<int>(P1.F1())){case 0:{double g3=d3.a-Y1->a;double h3=d3.c-Y1->c;if(g3>f3){b2->a=-90;a2->a+=f3;}else if(g3<-f3){b2->a=90;a2->a-=f3;}else if(h3>f3){b2->a=0;a2->c+=f3;}else if(h3<-f3){b2->a=180;a2->c-=f3;}Y1->a+=a2->a;Y1->c+=a2->c;a2->a=0.5;a2->c=0.5;if(std::abs(a2->a)<0.005)a2->a=0;if(std::abs(a2->c)<0.005)a2->c=0;break;}case 1:{a2->a=a2->b=a2->c=0;Y1->a=d3.a;Y1->b=d3.b;Y1->c=d3.c;break;}}j1();}void y1(const std::shared_ptr<a1::b1>&Fvv)override{if(X1!=nullptr&&std::dynamic_pointer_cast<XxX::network::play::client::C03PacketPlayer>(Fvv)){Fvv->setCanceled(true);}}void A1(const std::shared_ptr<a1::b1>&Fvv)override{if(Y1!=nullptr&&Z1!=nullptr&&a2!=nullptr&&b2!=nullptr&&c2!=nullptr){if(std::dynamic_pointer_cast<XxX::S12PacketEntityVelocity>(Fvv)){Fvv->setCanceled(true);auto m2=std::dynamic_pointer_cast<XxX::S12PacketEntityVelocity>(Fvv);a2}}}};
